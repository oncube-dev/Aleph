import sys
import time
from datetime import datetime
from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QLabel, QLineEdit, QPushButton, QTextEdit, 
                             QListWidget, QListWidgetItem, QSplitter, 
                             QFrame, QMessageBox, QMenu, QDialog,
                             QInputDialog, QScrollArea, QSizePolicy)
from PySide6.QtCore import Qt, Signal, QTimer, QThread, Slot
from PySide6.QtGui import QFont, QPixmap, QPalette, QColor, QIcon, QPainter, QBrush, QAction, QTextCursor
import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

try:
    from src.config import client_config as config
except ImportError:
    # –ï—Å–ª–∏ client_config –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π config
    from src.config import config
from src.database.database import Database
from src.network.network_manager import NetworkManager
from src.audio.audio_manager import AudioManager

class ContactItem(QWidget):
    """–í–∏–¥–∂–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ"""
    
    def __init__(self, contact_data: dict, parent=None):
        super().__init__(parent)
        self.contact_data = contact_data
        self.new_message_count = 0
        self.init_ui()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        layout = QHBoxLayout()
        layout.setContentsMargins(10, 5, 10, 5)
        layout.setSpacing(10)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞
        self.status_indicator = QLabel()
        self.status_indicator.setFixedSize(12, 12)
        self.status_indicator.setStyleSheet("""
            QLabel {
                border-radius: 6px;
                background-color: #95a5a6;
            }
        """)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        contact_info = QVBoxLayout()
        contact_info.setSpacing(2)
        
        self.name_label = QLabel(self.contact_data.get('display_name', self.contact_data['contact_id']))
        self.name_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.name_label.setStyleSheet("color: #2c3e50;")
        
        self.status_label = QLabel("–û—Ñ–ª–∞–π–Ω")
        self.status_label.setFont(QFont("Arial", 8))
        self.status_label.setStyleSheet("color: #7f8c8d;")
        
        contact_info.addWidget(self.name_label)
        contact_info.addWidget(self.status_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.new_message_indicator = QLabel()
        self.new_message_indicator.setFixedSize(20, 20)
        self.new_message_indicator.setStyleSheet("""
            QLabel {
                border-radius: 10px;
                background-color: #e74c3c;
                color: white;
                font-size: 10px;
                font-weight: bold;
                text-align: center;
                padding: 2px;
            }
        """)
        self.new_message_indicator.setAlignment(Qt.AlignCenter)
        self.new_message_indicator.hide()  # –°–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª–æ–ª—á–∞–Ω–∏—é
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        actions_layout.setSpacing(5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞
        self.call_button = QPushButton("üìû")
        self.call_button.setFixedSize(30, 30)
        self.call_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                border-radius: 15px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞
        self.chat_button = QPushButton("üí¨")
        self.chat_button.setFixedSize(30, 30)
        self.chat_button.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                border-radius: 15px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #1f5f8b;
            }
        """)
        
        actions_layout.addWidget(self.call_button)
        actions_layout.addWidget(self.chat_button)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ layout
        layout.addWidget(self.status_indicator)
        layout.addLayout(contact_info)
        layout.addStretch()
        layout.addWidget(self.new_message_indicator)
        layout.addLayout(actions_layout)
        
        self.setLayout(layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.call_button.clicked.connect(self.call_contact)
        self.chat_button.clicked.connect(self.chat_with_contact)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.update_status()
    
    def add_new_message_indicator(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.new_message_count += 1
        self.new_message_indicator.setText(str(self.new_message_count))
        self.new_message_indicator.show()
    
    def update_new_message_indicator(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.new_message_count += 1
        self.new_message_indicator.setText(str(self.new_message_count))
        self.new_message_indicator.show()
    
    def clear_new_message_indicator(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.new_message_count = 0
        self.new_message_indicator.hide()
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞"""
        is_online = self.contact_data.get('is_online', False)
        
        if is_online:
            self.status_indicator.setStyleSheet("""
                QLabel {
                    border-radius: 6px;
                    background-color: #27ae60;
                }
            """)
            self.status_label.setText("–û–Ω–ª–∞–π–Ω")
            self.status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
        else:
            self.status_indicator.setStyleSheet("""
                QLabel {
                    border-radius: 6px;
                    background-color: #95a5a6;
                }
            """)
            self.status_label.setText("–û—Ñ–ª–∞–π–Ω")
            self.status_label.setStyleSheet("color: #7f8c8d;")
    
    def call_contact(self):
        """–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        # –ù–∞–π—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        main_window = self.find_main_window()
        if main_window:
            main_window.start_call.emit(self.contact_data['contact_id'])
    
    def chat_with_contact(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
        # –ù–∞–π—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        main_window = self.find_main_window()
        if main_window:
            main_window.open_chat.emit(self.contact_data['contact_id'])
    
    def find_main_window(self):
        """–ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        parent = self.parent()
        while parent:
            if hasattr(parent, 'start_call') and hasattr(parent, 'open_chat'):
                return parent
            parent = parent.parent()
        return None

class ChatWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    def __init__(self, contact_id: str, database: Database, parent=None):
        super().__init__(parent)
        self.contact_id = contact_id
        self.database = database
        self.last_message_timestamp = None
        self._processed_messages = set()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.init_ui()
        self.load_messages()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.check_for_new_messages)
        self.update_timer.start(config.CHAT_UPDATE_INTERVAL)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        layout = QVBoxLayout()
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        header_layout = QHBoxLayout()
        
        self.contact_name_label = QLabel(f"–ß–∞—Ç —Å {self.contact_id}")
        self.contact_name_label.setFont(QFont("Arial", 12, QFont.Bold))
        self.contact_name_label.setStyleSheet("color: #2c3e50;")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        self.header_call_button = QPushButton("üìû")
        self.header_call_button.setFixedSize(30, 30)
        self.header_call_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                border-radius: 15px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        
        header_layout.addWidget(self.contact_name_label)
        header_layout.addStretch()
        header_layout.addWidget(self.header_call_button)
        
        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_area = QTextEdit()
        self.messages_area.setReadOnly(True)
        self.messages_area.setStyleSheet("""
            QTextEdit {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
                color: #2c3e50;
                padding: 10px;
                font-family: Arial, sans-serif;
                font-size: 10px;
            }
        """)
        
        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        input_layout = QHBoxLayout()
        
        self.message_input = QLineEdit()
        self.message_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        self.message_input.setStyleSheet("""
            QLineEdit {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                padding: 8px;
                font-size: 10px;
                color: #2c3e50;
                background-color: white;
            }
        """)
        
        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 8px 15px;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        
        input_layout.addWidget(self.message_input)
        input_layout.addWidget(self.send_button)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ layout
        layout.addLayout(header_layout)
        layout.addWidget(self.messages_area)
        layout.addLayout(input_layout)
        
        self.setLayout(layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.send_button.clicked.connect(self.send_message)
        self.message_input.returnPressed.connect(self.send_message)
        self.header_call_button.clicked.connect(self.call_contact)
    
    def load_messages(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        main_window = self.find_main_window()
        if main_window:
            messages = self.database.get_messages(main_window.current_user_id, self.contact_id)
            
            for message in messages:
                self.add_message_to_chat(message)
                
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if messages:
                last_message = messages[-1]
                self.last_message_timestamp = last_message.get('timestamp')
    
    def check_for_new_messages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        main_window = self.find_main_window()
        if not main_window:
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.last_message_timestamp:
            new_messages = self.database.get_messages_since(
                main_window.current_user_id, 
                self.contact_id, 
                self.last_message_timestamp
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_messages = self.database.get_messages(main_window.current_user_id, self.contact_id)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ handle_incoming_message)
        for message in new_messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            message_key = f"{message['sender_id']}_{message['message_text']}_{message['timestamp']}"
            if not hasattr(self, '_processed_messages') or message_key not in self._processed_messages:
                self.add_message_to_chat(message)
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if new_messages:
            last_message = new_messages[-1]
            self.last_message_timestamp = last_message.get('timestamp')
    
    def add_message_to_chat(self, message: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        sender_id = message['sender_id']
        message_text = message['message_text']
        timestamp = message['timestamp']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        message_key = f"{sender_id}_{message_text}_{timestamp}"
        if not hasattr(self, '_processed_messages'):
            self._processed_messages = set()
        
        if message_key in self._processed_messages:
            return  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        self._processed_messages.add(message_key)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self._processed_messages) > 100:
            self._processed_messages.clear()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        try:
            if isinstance(timestamp, str):
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            else:
                dt = datetime.fromtimestamp(timestamp)
            time_str = dt.strftime("%H:%M")
        except:
            time_str = str(timestamp)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        main_window = self.find_main_window()
        if not main_window:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
            return
            
        # –ù–∞–¥—ë–∂–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_user_id = main_window.current_user_id
        print(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '{current_user_id}' (—Ç–∏–ø: {type(current_user_id)})")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        sender_clean = str(sender_id).strip()
        current_clean = str(current_user_id).strip()
        direct_comparison = (sender_id == current_user_id)
        string_comparison = (sender_clean == current_clean)
        
        print(f"–ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {sender_id} == {current_user_id} = {direct_comparison}")
        print(f"–°—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: '{sender_clean}' == '{current_clean}' = {string_comparison}")
        
        is_own_message = string_comparison
        
        print(f"–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = {is_own_message}")
        
        if is_own_message:
            # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø—Ä–∞–≤–∞)
            print(f"‚úì –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –°–û–ë–°–¢–í–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –°–ü–†–ê–í–ê")
            message_html = f"""
                <div style="text-align: right; margin: 5px 0;">
                    <div style="display: inline-block; max-width: 70%; background-color: #3498db; color: white; 
                                padding: 8px 12px; border-radius: 15px; text-align: left;">
                        {message_text}
                    </div>
                    <div style="font-size: 8px; color: #7f8c8d; margin-top: 2px;">{time_str}</div>
                </div>
            """
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (—Å–ª–µ–≤–∞)
            print(f"‚úì –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –°–û–ë–ï–°–ï–î–ù–ò–ö–ê –°–õ–ï–í–ê")
            message_html = f"""
                <div style="text-align: left; margin: 5px 0;">
                    <div style="display: inline-block; max-width: 70%; background-color: #ecf0f1; color: #2c3e50; 
                                padding: 8px 12px; border-radius: 15px;">
                        {message_text}
                    </div>
                    <div style="font-size: 8px; color: #7f8c8d; margin-top: 2px;">{time_str}</div>
                </div>
            """
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_area.append(message_html)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        self.messages_area.ensureCursorVisible()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.last_message_timestamp = timestamp
        
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
        print(f"=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===")
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_text = self.message_input.text().strip()
        
        if not message_text:
            return
        
        main_window = self.find_main_window()
        if not main_window:
            return
        
        # –ù–∞–¥—ë–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user_id = main_window.current_user_id
        if not current_user_id:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.message_input.clear()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = {
            'sender_id': current_user_id,
            'receiver_id': self.contact_id,
            'message_text': message_text,
            'timestamp': datetime.now().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ç—å (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
        if hasattr(main_window, 'network_manager'):
            network_message = {
                'type': 'message',
                'sender_id': message['sender_id'],
                'receiver_id': message['receiver_id'],
                'message_text': message['message_text']
            }
            main_window.network_manager.send_client_message(network_message)
        else:
            print("–û—à–∏–±–∫–∞: —Å–µ—Ç–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def call_contact(self):
        """–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
        # –ù–∞–π—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        main_window = self.find_main_window()
        if main_window:
            main_window.start_call.emit(self.contact_id)
    
    def find_main_window(self):
        """–ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        parent = self.parent()
        while parent:
            if hasattr(parent, 'start_call') and hasattr(parent, 'open_chat'):
                return parent
            parent = parent.parent()
        return None
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞"""
        if hasattr(self, 'update_timer'):
            self.update_timer.stop()
        event.accept()

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    start_call = Signal(str)
    open_chat = Signal(str)
    
    def __init__(self, user_id: str):
        super().__init__()
        
        try:
            self.current_user_id = user_id
            self.database = Database()
            self.network_manager = None
            self.audio_manager = None
            self.current_chat = None
            
            self.init_ui()
            self.setup_network()
            self.setup_audio()
            self.load_contacts()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.start_call.connect(self.handle_call_request)
            self.open_chat.connect(self.handle_chat_request)
            
            # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            self.contacts_update_timer = QTimer()
            self.contacts_update_timer.timeout.connect(self.update_contacts_status)
            self.contacts_update_timer.start(config.CONTACTS_UPDATE_INTERVAL)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MainWindow: {e}")
            raise
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(f"{config.APP_NAME} - {self.current_user_id}")
        self.setGeometry(100, 100, 1000, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.contacts_panel = self.create_contacts_panel()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —á–∞—Ç
        self.chat_panel = self.create_chat_panel()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(self.contacts_panel)
        splitter.addWidget(self.chat_panel)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø–∞–Ω–µ–ª–µ–π
        splitter.setSizes([300, 700])
        
        main_layout.addWidget(splitter)
        central_widget.setLayout(main_layout)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ecf0f1;
            }
            QTextEdit {
                color: #2c3e50;
                background-color: white;
            }
            QLineEdit {
                color: #2c3e50;
                background-color: white;
            }
            QLabel {
                color: #2c3e50;
            }
        """)
    
    def create_contacts_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        panel = QWidget()
        panel.setStyleSheet("""
            QWidget {
                background-color: white;
                border-right: 1px solid #bdc3c7;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        header = QLabel("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
        header.setAlignment(Qt.AlignCenter)
        header.setFont(QFont("Arial", 14, QFont.Bold))
        header.setStyleSheet("""
            QLabel {
                background-color: #3498db;
                color: white;
                padding: 15px;
                border-bottom: 1px solid #2980b9;
            }
        """)
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.contacts_list = QListWidget()
        self.contacts_list.setStyleSheet("""
            QListWidget {
                border: none;
                background-color: white;
            }
            QListWidget::item {
                border-bottom: 1px solid #ecf0f1;
                padding: 5px;
            }
            QListWidget::item:selected {
                background-color: #ecf0f1;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        add_contact_button = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        add_contact_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px;
                font-size: 11px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        add_contact_button.clicked.connect(self.add_contact)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ layout
        layout.addWidget(header)
        layout.addWidget(self.contacts_list)
        layout.addWidget(add_contact_button)
        
        panel.setLayout(layout)
        return panel
    
    def create_chat_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —á–∞—Ç–∞"""
        panel = QWidget()
        panel.setStyleSheet("""
            QWidget {
                background-color: white;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        self.chat_header = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞")
        self.chat_header.setAlignment(Qt.AlignCenter)
        self.chat_header.setFont(QFont("Arial", 14, QFont.Bold))
        self.chat_header.setStyleSheet("""
            QLabel {
                background-color: #34495e;
                color: white;
                padding: 20px;
                border-bottom: 1px solid #2c3e50;
            }
        """)
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_area = QWidget()
        self.chat_area.setStyleSheet("""
            QWidget {
                background-color: #f8f9fa;
            }
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_widget = QWidget()
        welcome_layout = QVBoxLayout()
        welcome_layout.setAlignment(Qt.AlignCenter)
        
        welcome_label = QLabel("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!")
        welcome_label.setFont(QFont("Arial", 16))
        welcome_label.setStyleSheet("color: #7f8c8d;")
        welcome_label.setAlignment(Qt.AlignCenter)
        
        instruction_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è")
        instruction_label.setFont(QFont("Arial", 12))
        instruction_label.setStyleSheet("color: #95a5a6;")
        instruction_label.setAlignment(Qt.AlignCenter)
        instruction_label.setWordWrap(True)
        
        welcome_layout.addWidget(welcome_label)
        welcome_layout.addWidget(instruction_label)
        welcome_widget.setLayout(welcome_layout)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.chat_area_layout = QVBoxLayout()
        self.chat_area_layout.addWidget(welcome_widget)
        self.chat_area.setLayout(self.chat_area_layout)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ layout
        layout.addWidget(self.chat_header)
        layout.addWidget(self.chat_area)
        
        panel.setLayout(layout)
        return panel
    
    def setup_network(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.network_manager = NetworkManager(self.database)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.network_manager.message_callback = self.handle_incoming_message
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            if self.network_manager.connect_to_server(config.SERVER_HOST, config.SERVER_PORT):
                print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {config.SERVER_HOST}:{config.SERVER_PORT} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ
                status_message = {
                    'type': 'status_update',
                    'user_id': self.current_user_id,
                    'is_online': True
                }
                self.network_manager.send_client_message(status_message)
                
                # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_list_request = {
                    'type': 'user_list_request',
                    'user_id': self.current_user_id
                }
                self.network_manager.send_client_message(user_list_request)
                
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏: {e}")
    
    def handle_incoming_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        message_type = message.get('type')
        
        if message_type == 'message':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            sender_id = message.get('sender_id')
            receiver_id = message.get('receiver_id')
            message_text = message.get('message_text')
            timestamp = message.get('timestamp', time.time())
            
            # –ù–∞–¥—ë–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_user_id = self.current_user_id
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            sender_clean = str(sender_id).strip()
            current_clean = str(current_user_id).strip()
            is_own_message = (sender_clean == current_clean)
            
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
            if sender_id and receiver_id and message_text:
                self.database.add_message(sender_id, receiver_id, message_text)
                
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
                if self.current_chat and hasattr(self.current_chat, 'contact_id'):
                    chat_contact_id = self.current_chat.contact_id
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏:
                    # 1. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫ –Ω–∞–º
                    # 2. –≠—Ç–æ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
                    if ((sender_id == chat_contact_id and receiver_id == self.current_user_id) or
                        (sender_id == self.current_user_id and receiver_id == chat_contact_id)):
                        
                        message_data = {
                            'sender_id': sender_id,
                            'receiver_id': receiver_id,
                            'message_text': message_text,
                            'timestamp': datetime.fromtimestamp(timestamp).isoformat()
                        }
                        
                        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                        self.current_chat.add_message_to_chat(message_data)
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
                        self.current_chat.last_message_timestamp = message_data['timestamp']
                        
                        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (sender_id != self.current_user_id and 
                            self.audio_manager and 
                            config.ENABLE_SOUND_NOTIFICATIONS):
                            try:
                                self.audio_manager.play_notification_sound()
                            except:
                                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                if config.ENABLE_VISUAL_NOTIFICATIONS:
                    self.update_contact_message_indicator(sender_id, receiver_id)
        
        elif message_type == 'user_list_response':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = message.get('users', [])
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            pass
    
    def update_contact_message_indicator(self, sender_id: str, receiver_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            contact_id = sender_id if sender_id != self.current_user_id else receiver_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            for i in range(self.contacts_list.count()):
                item = self.contacts_list.item(i)
                contact_widget = self.contacts_list.itemWidget(item)
                
                if (hasattr(contact_widget, 'contact_data') and 
                    contact_widget.contact_data['contact_id'] == contact_id):
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if not hasattr(contact_widget, 'new_message_indicator'):
                        contact_widget.add_new_message_indicator()
                    else:
                        contact_widget.update_new_message_indicator()
                    break
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def setup_audio(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ"""
        try:
            self.audio_manager = AudioManager()
            print("–ê—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
    
    def load_contacts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
            all_users = self.database.get_all_users()
            contacts = [user for user in all_users if user['user_id'] != self.current_user_id]
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
            self.contacts_list.clear()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            for contact in contacts:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_data = {
                    'contact_id': contact['user_id'],
                    'display_name': contact.get('display_name', contact['user_id']),
                    'is_online': contact.get('is_online', False)
                }
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_widget = ContactItem(contact_data)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
                item = QListWidgetItem()
                item.setSizeHint(contact_widget.sizeHint())
                
                self.contacts_list.addItem(item)
                self.contacts_list.setItemWidget(item, contact_widget)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                contact_widget.update_status()
            
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
    
    def add_contact(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            contact_id, ok = QInputDialog.getText(
                self, 
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", 
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
            
            if ok and contact_id.strip():
                contact_id = contact_id.strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = self.database.get_user(contact_id)
                
                if user:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    self.database.add_contact(self.current_user_id, contact_id)
                    
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    self.load_contacts()
                    
                    QMessageBox.information(
                        self, 
                        "–£—Å–ø–µ—Ö", 
                        f"–ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –¥–æ–±–∞–≤–ª–µ–Ω!"
                    )
                else:
                    QMessageBox.warning(
                        self, 
                        "–û—à–∏–±–∫–∞", 
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {contact_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞", 
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"
            )
    
    def handle_call_request(self, contact_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"""
        try:
            reply = QMessageBox.question(
                self,
                "–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫",
                f"–ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫ —Å {contact_id}?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )
            
            if reply == QMessageBox.Yes:
                self.start_voice_call(contact_id)
                
        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞: {str(e)}"
            )
    
    def start_voice_call(self, contact_id: str):
        """–ù–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            if self.audio_manager:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Ä—Ç –¥–ª—è –∞—É–¥–∏–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                audio_port = 5001
                
                # –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
                success = self.audio_manager.start_audio_call(
                    config.HOST, 
                    audio_port, 
                    is_caller=True
                )
                
                if success:
                    QMessageBox.information(
                        self,
                        "–ó–≤–æ–Ω–æ–∫",
                        f"–ó–≤–æ–Ω–æ–∫ —Å {contact_id} –Ω–∞—á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ OK –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
                    )
                    
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
                    self.audio_manager.stop_audio_call()
                else:
                    QMessageBox.warning(
                        self,
                        "–û—à–∏–±–∫–∞",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫"
                    )
            else:
                QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞",
                    "–ê—É–¥–∏–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
                )
                
        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ: {str(e)}"
            )
    
    def handle_chat_request(self, contact_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
            self.chat_header.setText(f"–ß–∞—Ç —Å {contact_id}")
            
            # –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞
            for i in reversed(range(self.chat_area_layout.count())):
                child = self.chat_area_layout.itemAt(i).widget()
                if child:
                    child.deleteLater()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞
            chat_widget = ChatWidget(contact_id, self.database, self.chat_area)
            self.chat_area_layout.addWidget(chat_widget)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            self.current_chat = chat_widget
            
            # –û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            self.clear_contact_message_indicator(contact_id)
            
            print(f"–ß–∞—Ç —Å {contact_id} –æ—Ç–∫—Ä—ã—Ç")
            print(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user_id}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞: {e}")
    
    def clear_contact_message_indicator(self, contact_id: str):
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            for i in range(self.contacts_list.count()):
                item = self.contacts_list.item(i)
                contact_widget = self.contacts_list.itemWidget(item)
                
                if (hasattr(contact_widget, 'contact_data') and 
                    contact_widget.contact_data['contact_id'] == contact_id):
                    
                    if hasattr(contact_widget, 'clear_new_message_indicator'):
                        contact_widget.clear_new_message_indicator()
                    break
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def update_contacts_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            all_users = self.database.get_all_users()
            user_statuses = {user['user_id']: user.get('is_online', False) for user in all_users}
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            for i in range(self.contacts_list.count()):
                item = self.contacts_list.item(i)
                contact_widget = self.contacts_list.itemWidget(item)
                
                if hasattr(contact_widget, 'contact_data'):
                    contact_id = contact_widget.contact_data['contact_id']
                    new_status = user_statuses.get(contact_id, False)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if contact_widget.contact_data.get('is_online') != new_status:
                        contact_widget.contact_data['is_online'] = new_status
                        contact_widget.update_status()
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
            if hasattr(self, 'contacts_update_timer'):
                self.contacts_update_timer.stop()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ–ª–∞–π–Ω
            if self.network_manager:
                status_message = {
                    'type': 'status_update',
                    'user_id': self.current_user_id,
                    'is_online': False
                }
                self.network_manager.send_client_message(status_message)
                self.network_manager.stop_server()
            
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            if self.audio_manager:
                self.audio_manager.cleanup()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
            self.database.update_user_status(self.current_user_id, False)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        
        event.accept()
